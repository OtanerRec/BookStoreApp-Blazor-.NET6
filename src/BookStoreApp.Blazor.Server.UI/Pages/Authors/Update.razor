@page "/authors/update/{id:int}"
@inject IAuthorService _authorService
@inject NavigationManager _navManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Edit Author</h3>

<EditForm Model="Author" OnValidSubmit="HandleUpdateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname"> First Name</label>
        <InputText class="form-control" @bind-Value="Author.FirstName" id="firstname" />
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastname"> Last Name</label>
        <InputText class="form-control" @bind-Value="Author.LastName" id="lastname" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
    <div class="form-group">
        <label for="bio"> Biography</label>
        <InputText class="form-control" @bind-Value="Author.Bio" id="bio" />
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-pencil"></span>
        Update Author
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    private AuthorUpdateDTO Author = new AuthorUpdateDTO();

    protected async override Task OnInitializedAsync()
    {
        var response = await _authorService.GetAuthorForUpdate(id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private async Task HandleUpdateAuthor()
    {
        var response = await _authorService.EditAuthor(id, Author);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
