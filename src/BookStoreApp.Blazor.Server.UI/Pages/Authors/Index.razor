@page "/authors/"
@inject IAuthorService _authorService
@inject IJSRuntime js
<h3>Index</h3>

@if(response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Data...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="Administrator">
        <a class="btn btn-dark" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create </a>
        </AuthorizeView>
        <br />
        <AuthorTable Authors="Authors" TotalSize="TotalSize" Onscroll="LoadAuthors"/>
    }
}

@code {
    public List<AuthorReadOnlyDTO> Authors;
    public int TotalSize{ get; set; }
    private Response<AuthorReadOnlyDTOVirtualizeResponse> response = new
        Response<AuthorReadOnlyDTOVirtualizeResponse>
        {
            Success = true  
        };

    protected override async Task OnInitializedAsync()
    {
        response = await _authorService.GetAuthor(new QueryParameters {StartIndex = 0 });

        if (response.Success)
        {
            Authors = response.Data.Items.ToList();
        }
    }

    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var virtualizeResult = await _authorService.GetAuthor(queryParams);
        Authors = virtualizeResult.Data.Items.ToList();
        TotalSize = virtualizeResult.Data.TotalSize;
    }
}
